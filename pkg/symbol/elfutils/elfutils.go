// Copyright 2021 The Parca Authors
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package elfutils

import (
	"debug/elf"
	"errors"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/parca-dev/parca/internal/pprof/elfexec"
)

var (
	// Defined for testing
	elfOpen = elf.Open

	dwarfSuffix = func(s *elf.Section) string {
		switch {
		case strings.HasPrefix(s.Name, ".debug_"):
			return s.Name[7:]
		case strings.HasPrefix(s.Name, ".zdebug_"):
			return s.Name[8:]
		case strings.HasPrefix(s.Name, "__debug_"): // macos
			return s.Name[8:]
		default:
			return ""
		}
	}
)

// HasDWARF reports whether the specified executable or library file contains DWARF debug information.
func HasDWARF(path string) (bool, error) {
	f, err := elfOpen(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer f.Close()

	sections, err := readableDWARFSections(f)
	if err != nil {
		return false, fmt.Errorf("failed to read DWARF sections: %w", err)
	}

	return len(sections) > 0, nil
}

// A simplified and modified version of debug/elf.DWARF().
func readableDWARFSections(f *elf.File) (map[string]struct{}, error) {
	// There are many DWARf sections, but these are the ones
	// the debug/dwarf package started with "abbrev", "info", "str", "line", "ranges".
	// Possible candidates for future: "loc", "loclists", "rnglists"
	sections := map[string]*string{"abbrev": nil, "info": nil, "str": nil, "line": nil, "ranges": nil}
	exists := map[string]struct{}{}
	for _, s := range f.Sections {
		suffix := dwarfSuffix(s)
		if suffix == "" {
			continue
		}
		if _, ok := sections[suffix]; !ok {
			continue
		}
		if s.Type == elf.SHT_PROGBITS {
			exists[suffix] = struct{}{}
		}
	}

	return exists, nil
}

// IsSymbolizableGoObjFile checks whether the specified executable or library file is generated by Go toolchain.
func IsSymbolizableGoObjFile(path string) (bool, error) {
	// Checks ".note.go.buildid" section and symtab better to keep those sections in object file.
	f, err := elfOpen(path)
	if err != nil {
		return false, fmt.Errorf("failed to open elf: %w", err)
	}
	defer f.Close()

	isGo := false
	for _, s := range f.Sections {
		if s.Name == ".note.go.buildid" {
			isGo = true
		}
	}

	// In case ".note.go.buildid" section is stripped, check for symbols.
	if !isGo {
		syms, err := f.Symbols()
		if err != nil {
			return false, fmt.Errorf("failed to read symbols: %w", err)
		}
		for _, sym := range syms {
			name := sym.Name
			if name == "runtime.main" || name == "main.main" {
				isGo = true
			}
			if name == "runtime.buildVersion" {
				isGo = true
			}
		}
	}

	if !isGo {
		return false, nil
	}

	// Check if the Go binary symbolizable.
	// Go binaries has a special case. They use ".gopclntab" section to symbolize addresses.
	if sec := f.Section(".gopclntab"); sec != nil {
		if sec.Type == elf.SHT_PROGBITS {
			return true, nil
		}
	}

	return false, errors.New("failed to detect .gopclntab section or section has no bits")
}

// Open opens the specified executable or library file.
func Open(path string, start, limit, offset uint64) (*objFile, error) {
	f, err := os.Open(path)
	if err != nil {
		return nil, fmt.Errorf("error opening %s: %v", path, err)
	}
	defer f.Close()

	// Read the first 4 bytes of the file.
	var header [4]byte
	if _, err = io.ReadFull(f, header[:]); err != nil {
		return nil, fmt.Errorf("error reading magic number from %s: %v", path, err)
	}

	elfMagic := string(header[:])

	// Match against supported file types.
	if elfMagic == elf.ELFMAG {
		f, err := open(path, start, limit, offset)
		if err != nil {
			return nil, fmt.Errorf("error reading ELF file %s: %v", path, err)
		}
		return f, nil
	}

	return nil, fmt.Errorf("unrecognized binary format: %s", path)
}

func open(path string, start, limit, offset uint64) (*objFile, error) {
	ef, err := elfOpen(path)
	if err != nil {
		return nil, fmt.Errorf("error parsing %s: %v", path, err)
	}
	defer ef.Close()

	buildID := ""
	if f, err := os.Open(path); err == nil {
		if id, err := elfexec.GetBuildID(f); err == nil {
			buildID = fmt.Sprintf("%x", id)
		}
	}

	var (
		stextOffset *uint64
		pageAligned = func(addr uint64) bool { return addr%4096 == 0 }
	)
	if strings.Contains(path, "vmlinux") || !pageAligned(start) || !pageAligned(limit) || !pageAligned(offset) {
		// Reading all Symbols is expensive, and we only rarely need it so
		// we don't want to do it every time. But if _stext happens to be
		// page-aligned but isn't the same as Vaddr, we would symbolize
		// wrong. So if the path the addresses aren't page aligned, or if
		// the path is "vmlinux" we read _stext. We can be wrong if: (1)
		// someone passes a kernel path that doesn't contain "vmlinux" AND
		// (2) _stext is page-aligned AND (3) _stext is not at Vaddr
		symbols, err := ef.Symbols()
		if err != nil && err != elf.ErrNoSymbols {
			return nil, err
		}
		for _, s := range symbols {
			if s.Name == "_stext" {
				// The kernel may use _stext as the mapping start address.
				stextOffset = &s.Value
				break
			}
		}
	}

	// Check that we can compute a base for the binary. This may not be the
	// correct base value, so we don't save it. We delay computing the actual base
	// value until we have a sample address for this mapping, so that we can
	// correctly identify the associated program segment that is needed to compute
	// the base.
	if _, err := elfexec.GetBase(&ef.FileHeader, elfexec.FindTextProgHeader(ef), stextOffset, start, limit, offset); err != nil {
		return nil, fmt.Errorf("could not identify base for %s: %v", path, err)
	}
	return &objFile{
		path:    path,
		buildID: buildID,
		m:       &mapping{start: start, limit: limit, offset: offset, stextOffset: stextOffset},
	}, nil
}
